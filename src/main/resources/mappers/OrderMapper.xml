<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OrderMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type) 명시 -->
	<resultMap id="orderMap" type="study.spring.surisulsul.model.Order">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column) 연결 -->
		<result property="loginId" column="loginId" />
		
		<result property="o_id" column="o_id" />
		<result property="price" column="price" />
		<result property="b_id" column="b_id" />
		<result property="b_name" column="b_name" />
		<result property="b_phone" column="b_phone" />
		<result property="r_name" column="r_name" />
		<result property="r_phone" column="r_phone" />
		<result property="r_postcode" column="r_postcode" />
		<result property="r_address1" column="r_address1" />
		<result property="r_address2" column="r_address2" />
		<result property="payment" column="payment" />
		<result property="pay_result" column="pay_result" />
		<result property="pay_cash" column="pay_cash" />
		<result property="pay_card" column="pay_card" />
		<result property="send_result" column="send_result" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
		
		<result property="sub_id" column="sub_id" />
		<result property="p_id" column="p_id" />
		<result property="p_name" column="p_name" />
		<result property="p_price" column="p_price" />
		<result property="p_qty" column="qty" />
		<result property="has_review" column="has_review" />
		<result property="o_date" column="o_date" />
		
		<result property="total_qty" column="total_qty" />
		
		<result property="order_cnt" column="order_cnt" />
		<result property="from_date" column="from_date" />
		<result property="to_date" column="to_date" />
		
		<result property="sum_price" column="sum_price" />
		<result property="cash_sum" column="cash_sum" />
		<result property="card_sum" column="card_sum" />
		<result property="unpaid_sum" column="unpaid_sum" />
	</resultMap>
	
	
	<!-- 주문내역 - 다중행 조회를 위한 기능 정의 -->
	<select id="selectList" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		<!-- orders테이블과 orders_sub 테이블의 JOIN -->
		SELECT o.id AS o_id, os.o_date AS reg_date, os.p_id, os.p_name, os.p_price, os.qty, os.has_review, o.price, o.pay_result, o.send_result
		FROM orders o
		INNER JOIN orders_sub os
		ON o.id=os.o_id
		WHERE o.b_id=#{loginId}
		ORDER BY o.id DESC
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	
	<!-- 주문 단일행 조회 - 주문 PK로 주문정보 받아오기 -->
	<select id="selectItem" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT id AS o_id, r_name, r_phone, r_address1, r_address2, reg_date FROM orders
		WHERE id=#{o_id} AND b_id=${b_id};
	</select>
	
	<!-- 주문 목록 수 조회 - 구매했어요:페이지네이션 사용 용도 -->
	<select id="selectOrderCount" parameterType="study.spring.surisulsul.model.Order" resultType="int">
		SELECT COUNT(*)
		FROM orders o
		INNER JOIN orders_sub os
		ON o.id=os.o_id
		WHERE o.b_id=#{loginId};
	</select>
	
	<!-- 주문하기 - orders 테이블에 주문 관련 데이터 입력(INSERT) 기능 정의 -->
	<insert id="insertOrderItem" parameterType="study.spring.surisulsul.model.Order" useGeneratedKeys="true" keyProperty="o_id">
		INSERT INTO orders 
		(price, b_id, b_name, b_phone,
		r_name, r_phone, r_postcode, r_address1, r_address2, 
		payment, pay_cash, pay_card, pay_result, send_result, reg_date, edit_date) 
		VALUES 
		(#{price}, #{b_id}, #{b_name}, #{b_phone},
		#{r_name}, #{r_phone}, #{r_postcode}, #{r_address1}, #{r_address2},
		#{payment}, #{pay_cash}, #{pay_card}, #{pay_result}, 'N', now(), now());
	</insert>
	
	<!-- 주문하기 - orders_sub 테이블에 주문 상세 상품 목록 입력(INSERT) 기능 정의 -->
	<insert id="insertSubItem" parameterType="study.spring.surisulsul.model.Order" useGeneratedKeys="true" keyProperty="sub_id">
		INSERT INTO orders_sub (o_id, p_id, p_name, p_price, qty, has_review, o_date)
		VALUES (#{o_id}, #{p_id}, #{p_name}, #{p_price}, #{p_qty}, 'N', #{reg_date});
	</insert>
	
	<!-- 주문하기 - 주문이 처리 된 이후 order_result 페이지에서 결과 확인을 위해 orders_sub 테이블 내용 조회 -->
	<select id="selectOrderSubList" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT p_id, p_name, qty, p_price FROM orders_sub
		WHERE o_id=#{o_id};
	</select>
	
	<!-- 주문취소 - orders 테이블에서 주문 관련 데이터 취소(=삭제=DELETE) 기능 정의 -->
	<delete id="deleteOrderItem" parameterType="study.spring.surisulsul.model.Order">
		DELETE FROM orders WHERE id=#{o_id};
	</delete>
	
	<!-- 주문취소 - deleteOrderItem이 수행될때 먼저 orders_sub 테이블에서도 해당 o_id(MUL)에 해당하는 상품 목록을 지워야 한다. -->
	<delete id="deleteSubItem" parameterType="study.spring.surisulsul.model.Order">
		DELETE FROM orders_sub WHERE o_id=#{o_id};
	</delete>
	
	<!-- 리뷰 작성 후 해당 orders_sub 컬럼에 has_review 상태 Y로 업데이트 -->
	<update id="updateReview" parameterType="study.spring.surisulsul.model.Order">
		UPDATE orders_sub SET has_review='Y'
		WHERE o_id=#{o_id} AND p_id=#{p_id};
	</update>
	
	
	<!-- ==================================================================================
	!!!!!!!!!!!!!!!!!!!!!! 여기서부터 관리자 페이지 관련 SQL 구문 !!!!!!!!!!!!!!!!!!!!!!
	========================================================================================= -->
	
	<!-- 주문내역(manage_orders)페이지에서 사용되는 SELECT SQL 구문 -->
	<select id="selectManageOrders"  parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT id as o_id, b_id, b_name, b_phone, r_name, r_phone, price, pay_result, send_result, payment, 
			   date_format(reg_date, '%Y%m%d') AS reg_date, date_format(edit_date, '%Y-%m-%d') AS edit_date
		FROM orders
		<where>
			<if test="pay_result!=null and pay_result!=''">
				pay_result=#{pay_result}
			</if>
			<if test="send_result!=null and send_result!=''">
				AND send_result=#{send_result}
			</if>
			<if test="payment!=null and payment!=''">
				AND payment=#{payment}
			</if>
			<if test="from_date!=null and from_date!='' and to_date!=null and to_date!=''">
				AND reg_date BETWEEN #{from_date} AND #{to_date}
			</if>
			<if test="reg_date!=null and reg_date!=''">
				AND date_format(reg_date, '%Y-%m-%d')=#{reg_date}
			</if>
		</where>
		ORDER BY id DESC
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	
	<!-- 누적주문수 select 구문  -->
	<select id="selectMemOrderCnt" parameterType="study.spring.surisulsul.model.Order" resultType="int">
		SELECT COUNT(*) FROM orders WHERE b_id = #{b_id};
	</select>
	
	<!-- 해당 주문의 총 상품 수  select 구문 -->
	<select id="selectSubCnt" parameterType="study.spring.surisulsul.model.Order" resultType="int">
		SELECT COUNT(*) FROM orders_sub WHERE o_id=#{o_id};
	</select>
	
	<!-- manage_orders_details 에서 받아갈 select 구문 (주문정보용) -->
	<select id="selectOrderDetails" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT id AS o_id, price, pay_result, send_result, b_name, b_phone, r_name, r_phone, 
			r_postcode, r_address1, r_address2, payment, pay_cash, reg_date, edit_date
		FROM orders
		WHERE id = #{o_id};
	</select>
	
	<!-- manage_orders_details / uncmpl_orders 에서 사용할 update 구문 -->
	<!-- 입금대기 -> 입금완료  -->
	<update id="updatePayResult" parameterType="study.spring.surisulsul.model.Order">
		UPDATE orders SET pay_result='Y', edit_date=now()
		WHERE id=#{o_id};
	</update>
	<!-- 입금완료 -> 배송완료  -->
	<update id="updateSendResult" parameterType="study.spring.surisulsul.model.Order">
		UPDATE orders SET send_result='Y', edit_date=now()
		WHERE id=#{o_id};
	</update>
	
	<!-- uncmpl_orders 에서 받아갈 select 구문 >> pay_result가 N이거나 send_result가 N인 경우 -->
	<select id="selectUncmplOrders" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT id as o_id, pay_result, send_result, b_name, b_phone, r_name, price, payment, reg_date
		FROM orders
		WHERE pay_result='N' OR send_result='N'
		ORDER BY reg_date DESC;
	</select>
	
	<!-- manage_sales에서 받아갈 select 구문 (1) >> 월간매출  -->
	<select id="selectMonthSales" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT date_format(reg_date, '%Y%m') AS reg_date, COUNT(*) AS order_cnt, SUM(price) AS sum_price,
				SUM(if(payment='cash', price, 0)) AS cash_sum, SUM(if(payment='card', price, 0)) AS card_sum, 
				SUM(if(pay_result='N', price, 0)) AS unpaid_sum
		FROM orders 
		WHERE date_format(reg_date, '%Y%m') BETWEEN #{from_date} AND #{to_date} 
		GROUP BY date_format(reg_date, '%Y%m') ;
	</select>
	
	<!-- manage_sales에서 받아갈 select 구문 (2) >> 연간매출 -->
	<select id="selectYearSales" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT date_format(reg_date, '%Y') AS reg_date, COUNT(*) AS order_cnt, SUM(price) AS sum_price,
				SUM(if(payment='cash', price, 0)) AS cash_sum, SUM(if(payment='card', price, 0)) AS card_sum, 
				SUM(if(pay_result='N', price, 0)) AS unpaid_sum
		FROM orders 
		WHERE date_format(reg_date, '%Y') BETWEEN #{from_date} AND #{to_date} 
		GROUP BY date_format(reg_date, '%Y');
	</select>
	
	<!-- 관리자페이지 -> manage_home.do 에서 사용할 select 구문 (차트용) -->
	<select id="selectChart" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		SELECT date_format(reg_date, '%Y-%m-%d') as reg_date, sum(price) as sum_price 
		FROM orders 
		WHERE date_format(reg_date, '%Y-%m-%d') BETWEEN #{from_date} AND #{to_date} 
		GROUP BY date_format(reg_date, '%Y-%m-%d');
	</select>
	
</mapper>