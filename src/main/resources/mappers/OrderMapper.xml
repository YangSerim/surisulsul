<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OrderMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type) 명시 -->
	<resultMap id="orderMap" type="study.spring.surisulsul.model.Order">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column) 연결 -->
		<result property="id" column="o_id" />
		<result property="price" column="price" />
		<result property="b_id" column="b_id" />
		<result property="b_name" column="b_name" />
		<result property="b_phone" column="b_phone" />
		<result property="r_name" column="r_name" />
		<result property="r_phone" column="r_phone" />
		<result property="r_postcode" column="r_postcode" />
		<result property="r_address1" column="r_address1" />
		<result property="r_address2" column="r_address2" />
		<result property="payment" column="payment" />
		<result property="pay_result" column="pay_result" />
		<result property="pay_cash" column="pay_cash" />
		<result property="pay_card" column="pay_card" />
		<result property="send_result" column="send_result" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
		
		<result property="sub_id" column="sub_id" />
		<result property="p_id" column="p_id" />
		<result property="p_name" column="p_name" />
		<result property="p_price" column="p_price" />
	</resultMap>
	
	
	<!-- 주문내역 - 다중행 조회를 위한 기능 정의 -->
	<select id="selectList" parameterType="study.spring.surisulsul.model.Order" resultMap="orderMap">
		<!-- orders테이블과 orders_sub 테이블의 JOIN -->
	</select>
	
	<!-- 주문하기 - orders 테이블에 주문 관련 데이터 입력(INSERT) 기능 정의 -->
	<insert id="insertOrderItem" parameterType="study.spring.surisulsul.model.Order" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO orders 
		(price, b_id, b_name, b_phone,
		r_name, r_phone, r_postcode, r_address1, r_address2, 
		payment, pay_cash, pay_card, pay_result, send_result, reg_date, edit_date) 
		VALUES 
		(#{price}, #{b_id}, #{b_name}, #{b_phone},
		#{r_name}, #{r_phone}, #{r_postcode}, #{r_address1}, #{r_address2}.
		#{payment}, #{pay_cash}, #{pay_card}, #{pay_result}, #{send_result}, now(), now());
	</insert>
	
	<!-- 주문하기 - orders_sub 테이블에 주문 상세 상품 목록 입력(INSERT) 기능 정의 -->
	<insert id="insertSubItem" parameterType="study.spring.surisulsul.model.Order" useGeneratedKeys="true" keyProperty="sub_id">
		INSERT INTO orders_sub (o_id, p_id, p_name, p_price, qty, o_date)
		VALUES (#{o_id}, #{p_id}, #{p_name}, #{p_price}, #{qty}, #{o_date});
	</insert>
	
	<!-- 주문취소 - orders 테이블에서 주문 관련 데이터 취소(=삭제=DELETE) 기능 정의 -->
	<delete id="deleteOrderItem" parameterType="study.spring.surisulsul.model.Order">
		DELETE FROM orders WHERE id=#{o_id};
	</delete>
	
	<!-- 주문취소 - deleteOrderItem이 수행될때 먼저 orders_sub 테이블에서도 해당 o_id(MUL)에 해당하는 상품 목록을 지워야 한다. -->
	<delete id="deleteOrderItem" parameterType="study.spring.surisulsul.model.Order">
		DELETE FROM orders_sub WHERE o_id=#{o_id};
	</delete>
</mapper>