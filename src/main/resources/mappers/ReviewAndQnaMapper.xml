<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ReviewAndQnaMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type) 명시 -->
	<resultMap id="reviewMap"
		type="study.spring.surisulsul.model.Review">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column) 연결 -->
		<result property="id" column="id" />
		<result property="m_id" column="m_id" />
		<result property="m_name" column="m_name" />
		<result property="p_id" column="p_id" />
		<result property="content" column="content" />
		<result property="star" column="star" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
		<result property="rev_img" column="rev_img" />
		<result property="p_name" column="p_name" />
	</resultMap>

	<resultMap id="qnaMap"
		type="study.spring.surisulsul.model.Qna">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column) 연결 -->
		<result property="id" column="id" />
		<result property="m_id" column="m_id" />
		<result property="m_name" column="m_name" />
		<result property="p_id" column="p_id" />
		<result property="type" column="type" />
		<result property="content" column="content" />
		<result property="status" column="status" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
		<result property="p_name" column="p_name" />
	</resultMap>

	<!-- 단일 리뷰 조회를 위한 기능 정의 -->
	<select id="selectReviewItem"
		parameterType="study.spring.surisulsul.model.Review"
		resultMap="reviewMap">
		SELECT r.id, r.m_id, r.m_name, r.p_id, r.content, r.star,
		r.reg_date, r.edit_date, r.rev_img, p.name `p_name` FROM review r
		INNER JOIN products p ON r.p_id = p.id
		WHERE r.id=#{id};
	</select>

	<!-- 상품별 리뷰 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="productReviewList"
		parameterType="study.spring.surisulsul.model.Review"
		resultMap="reviewMap">
		SELECT r.m_id, concat(left(r.m_name,1),'**') as m_name, r.p_id,
		r.content, r.star, date_format(r.reg_date,'%Y-%m-%d') as reg_date,
		r.edit_date, r.rev_img, p.name `p_name` FROM review r
		INNER JOIN
		products p ON r.p_id = p.id
		WHERE p_id=#{p_id}
		ORDER BY r.reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 회원별 리뷰 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="memberReviewList"
		parameterType="study.spring.surisulsul.model.Review"
		resultMap="reviewMap">
		SELECT r.id, r.m_id, r.m_name, r.p_id, r.content, r.star,
		date_format(r.reg_date,'%Y-%m-%d') as reg_date, r.edit_date,
		r.rev_img, p.name `p_name` FROM review r
		INNER JOIN products p ON
		r.p_id = p.id
		WHERE m_id=#{m_id}
		ORDER BY r.reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	
	<!-- 회원별 리뷰 수 조회를 위한 기능 정의 -->
	<select id="selectCountMemberReview"
		parameterType="study.spring.surisulsul.model.Review" resultType="int">
		SELECT
		count(*) FROM review WHERE m_id=#{m_id};
	</select>
	
	<!-- 리뷰 목록 조회(다중행 조회)를 위한 기능 정의 (검색어 있음, 관리자용) -->
	<select id="manageReviewSearch"
		parameterType="study.spring.surisulsul.model.Review"
		resultMap="reviewMap">
		SELECT r.id, r.m_id, r.m_name, r.p_id, r.content, r.star,
		date_format(r.reg_date,'%Y-%m-%d') as reg_date, r.edit_date,
		r.rev_img, p.name `p_name` FROM review r
		INNER JOIN products p ON
		r.p_id = p.id
		<where>
			<if test="p_name!=null and p_name!=''">
				p.name like concat('%',#{p_name},'%')
			</if>
			<if test="m_name!=null and m_name!=''">
				r.m_name like concat('%',#{m_name},'%')
			</if>
		</where>
		ORDER BY r.reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 상품별 리뷰 수 조회를 위한 기능 정의 (관리자용, 임시 작성) -->
	<select id="selectCountProductReview"
		parameterType="study.spring.surisulsul.model.Review" resultType="int">
		SELECT count(*) FROM review WHERE p_id=#{p_id};
	</select>

	<!-- 별점 합산을 위한 기능 정의 (관리자용, 임시 작성) -->
	<select id="sumStarProductReview"
		parameterType="study.spring.surisulsul.model.Review" resultType="int">
		SELECT sum(star) FROM review WHERE p_id=#{p_id};
	</select>

	<!-- 리뷰 수 조회를 위한 기능 정의 (관리자용, 임시 작성) -->
	<select id="selectCountReview"
		parameterType="study.spring.surisulsul.model.Review" resultType="int">
		SELECT count(*) FROM review r INNER JOIN products p ON r.p_id = p.id
		<where>
			<if test="p_name!=null and p_name!=''">
				p.name like concat('%',#{p_name},'%')
			</if>
			<if test="m_name!=null and m_name!=''">
				r.m_name like concat('%',#{m_name},'%')
			</if>
		</where>
	</select>

	<!-- 리뷰 작성을 위한 기능 정의 -->
	<insert id="addReview"
		parameterType="study.spring.surisulsul.model.Review"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO review (m_id, m_name,
		p_id, content, star, reg_date, edit_date, rev_img) VALUES
		(#{m_id},
		#{m_name}, #{p_id}, #{content}, #{star}, now(),
		now(), #{rev_img});
	</insert>

	<!-- 리뷰 수정을 위한 기능 정의 -->
	<update id="updateReview"
		parameterType="study.spring.surisulsul.model.Review">
		UPDATE review SET m_id=#{m_id}, m_name=#{m_name},
		p_id=#{p_id}, content=#{content}, star=#{star}, edit_date=now(),
		rev_img=#{rev_img} WHERE
		id=#{id};
	</update>

	<!-- 리뷰 삭제를 위한 기능 정의 -->
	<delete id="deleteReview"
		parameterType="study.spring.surisulsul.model.Review">
		DELETE FROM review WHERE id=#{id}
	</delete>

	<!-- 리뷰 삭제를 위한 기능 정의 -->
	<delete id="manage_deleteReview"
		parameterType="study.spring.surisulsul.model.Product">
		DELETE FROM review WHERE p_id=#{id}
	</delete>

	<!-- 단일 문의 조회를 위한 기능 정의 -->
	<select id="selectQnaItem"
		parameterType="study.spring.surisulsul.model.Qna" resultMap="qnaMap">
		SELECT
		q.m_id, q.m_name, q.p_id, q.type, q.content, q.status,
		date_format(q.reg_date,'%Y-%m-%d') as reg_date, q.edit_date, p.name
		`p_name` FROM qna q
		INNER JOIN products p ON q.p_id = p.id
		WHERE
		q.id=#{id};
	</select>

	<!-- 상품별 문의 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="productQnaList"
		parameterType="study.spring.surisulsul.model.Qna" resultMap="qnaMap">
		SELECT q.m_id, q.m_name, q.p_id, q.type, q.content, q.status,
		date_format(q.reg_date,'%Y-%m-%d') as reg_date, q.edit_date, p.name
		`p_name` FROM qna q
		INNER JOIN products p ON q.p_id = p.id
		WHERE
		p_id=#{p_id}
		ORDER BY q.reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 회원별 문의 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="memberQnaList"
		parameterType="study.spring.surisulsul.model.Qna" resultMap="qnaMap">
		SELECT q.id, q.m_id, q.m_name, q.p_id, q.type, q.content, q.status,
		date_format(q.reg_date,'%Y-%m-%d') as reg_date, q.edit_date, p.name
		`p_name` FROM qna q
		INNER JOIN products p ON q.p_id = p.id
		WHERE
		m_id=#{m_id}
		ORDER BY q.reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 문의 목록 조회(다중행 조회)를 위한 기능 정의 (검색어 있음, 관리자용) -->
	<select id="manageQnaSearch"
		parameterType="study.spring.surisulsul.model.Qna" resultMap="qnaMap">
		SELECT q.id, q.m_id, q.m_name, q.p_id, q.type, q.content, q.status,
		date_format(q.reg_date,'%Y-%m-%d') as reg_date, q.edit_date, p.name
		`p_name` FROM qna q
		INNER JOIN products p ON q.p_id = p.id
		<where>
			<if test="p_name!=null and p_name!=''">
				p.name like concat('%',#{p_name},'%')
			</if>
			<if test="m_name!=null and m_name!=''">
				q.m_name like concat('%',#{m_name},'%')
			</if>
		</where>
		ORDER BY q.reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 상품별 문의 수 조회를 위한 기능 정의 (관리자용, 임시 작성) -->
	<select id="selectCountProductQna"
		parameterType="study.spring.surisulsul.model.Qna" resultType="int">
		SELECT
		count(*) FROM qna WHERE p_id=#{p_id};
	</select>

	<!-- 회원별 문의 수 조회를 위한 기능 정의 (관리자용, 임시 작성) -->
	<select id="selectCountMemberQna"
		parameterType="study.spring.surisulsul.model.Qna" resultType="int">
		SELECT
		count(*) FROM qna WHERE m_id=#{m_id};
	</select>

	<!-- 문의 수 조회를 위한 기능 정의 (관리자용, 임시 작성) -->
	<select id="selectCountQna"
		parameterType="study.spring.surisulsul.model.Qna" resultType="int">
		SELECT count(*) FROM qna q
		INNER JOIN products p ON q.p_id = p.id
		<where>
			<if test="p_name!=null and p_name!=''">
				p.name like concat('%',#{p_name},'%')
			</if>
			<if test="m_name!=null and m_name!=''">
				q.m_name like concat('%',#{m_name},'%')
			</if>
		</where>
	</select>

	<!-- 오늘 작성된 문의 수 조회를 위한 기능 정의 (관리자용) -->
	<select id="selectNewQnaCount"
		parameterType="study.spring.surisulsul.model.Qna" resultType="int">
		SELECT count(*) FROM qna
		<where>
			date_format(reg_date, '%Y-%m-%d')=date_format(now(),'%Y-%m-%d')
		</where>
	</select>

	<!-- 문의 작성을 위한 기능 정의 -->
	<insert id="addQna"
		parameterType="study.spring.surisulsul.model.Qna"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO qna (m_id, m_name,
		p_id, type, content, status, reg_date, edit_date) VALUES (#{m_id},
		#{m_name}, #{p_id}, #{type}, #{content}, 'N', now(), now());
	</insert>

	<!-- 문의 수정을 위한 기능 정의 -->
	<update id="updateQna"
		parameterType="study.spring.surisulsul.model.Qna">
		UPDATE qna SET m_id=#{m_id}, m_name=#{m_name},
		p_id=#{p_id}, type=#{type}, content=#{content}, status='N',
		reg_date=#{reg_date}, edit_date=now() WHERE
		id=#{id} AND status='N';
	</update>
	
	<!-- 문의 수정을 위한 기능 정의 -->
	<update id="updateManageQna"
		parameterType="study.spring.surisulsul.model.Qna">
		UPDATE qna SET status='Y', edit_date=now()
		WHERE id=#{id} AND status='N';
	</update>

	<!-- 문의 삭제를 위한 기능 정의 -->
	<delete id="deleteQna"
		parameterType="study.spring.surisulsul.model.Qna">
		DELETE FROM qna WHERE id=#{id}
	</delete>

	<!-- 리뷰 삭제를 위한 기능 정의 -->
	<delete id="manage_deleteQna"
		parameterType="study.spring.surisulsul.model.Product">
		DELETE FROM qna WHERE p_id=#{id}
	</delete>

</mapper>