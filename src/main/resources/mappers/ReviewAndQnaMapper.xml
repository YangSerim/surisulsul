<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ReviewAndQnaMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type) 명시 -->
	<resultMap id="reviewMap"
		type="study.spring.surisulsul.model.Review">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column) 연결 -->
		<result property="id" column="id" />
		<result property="m_id" column="m_id" />
		<result property="m_name" column="m_name" />
		<result property="p_id" column="p_id" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="star" column="star" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
		<result property="rev_img" column="rev_img" />
	</resultMap>

	<resultMap id="qnaMap"
		type="study.spring.surisulsul.model.Qna">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column) 연결 -->
		<result property="id" column="id" />
		<result property="m_id" column="m_id" />
		<result property="m_name" column="m_name" />
		<result property="p_id" column="p_id" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="status" column="status" />
		<result property="reg_date" column="reg_date" />
		<result property="edit_date" column="edit_date" />
	</resultMap>

	<!-- 상품별 리뷰 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="productReviewList"
		parameterType="study.spring.surisulsul.model.Review"
		resultMap="reviewMap">
		SELECT * FROM reviews
		WHERE p_id=#{p_id}
		ORDER BY reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 회원별 리뷰 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="memberReviewList"
		parameterType="study.spring.surisulsul.model.Review"
		resultMap="reviewMap">
		SELECT * FROM reviews
		WHERE m_id=#{m_id}
		ORDER BY reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 리뷰 작성을 위한 기능 정의 -->
	<insert id="addReview"
		parameterType="study.spring.surisulsul.model.Review"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO review (m_id, m_name,
		p_id, title, content, star, reg_date, edit_date, rev_img) VALUES
		(#{m_id}, #{m_name}, #{p_id}, #{title}, #{content}, #{star}, now(),
		now(), #{rev_img});
	</insert>

	<!-- 리뷰 수정을 위한 기능 정의 -->
	<update id="updateReview"
		parameterType="study.spring.surisulsul.model.Review">
		UPDATE review SET m_id=#{m_id}, m_name=#{m_name},
		p_id=#{p_id}, title=#{title}, content=#{content}, star=#{star},
		reg_date=#{reg_date}, edit_date=now(), rev_img=#{rev_img} WHERE
		id=#{id};
	</update>

	<!-- 리뷰 삭제를 위한 기능 정의 -->
	<delete id="deleteReview"
		parameterType="study.spring.surisulsul.model.Review">
		DELETE FROM reviews WHERE id=#{id}
	</delete>

	<!-- 상품별 문의 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="productQnaList"
		parameterType="study.spring.surisulsul.model.Qna" resultMap="qnaMap">
		SELECT * FROM qna
		WHERE p_id=#{p_id}
		ORDER BY reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 회원별 문의 목록 조회(다중행 조회)를 위한 기능 정의 -->
	<select id="memberQnaList"
		parameterType="study.spring.surisulsul.model.Qna" resultMap="qnaMap">
		SELECT * FROM qna
		WHERE m_id=#{m_id}
		ORDER BY reg_date DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 문의 작성을 위한 기능 정의 -->
	<insert id="addQna"
		parameterType="study.spring.surisulsul.model.Qna"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO qna (m_id, m_name,
		p_id, title, content, status, reg_date, edit_date) VALUES (#{m_id},
		#{m_name}, #{p_id}, #{title}, #{content}, 'N', now(), now());
	</insert>

	<!-- 문의 수정을 위한 기능 정의 -->
	<update id="updateQna"
		parameterType="study.spring.surisulsul.model.Qna">
		UPDATE qna SET m_id=#{m_id}, m_name=#{m_name},
		p_id=#{p_id}, title=#{title}, content=#{content}, status='N',
		reg_date=#{reg_date}, edit_date=now(), rev_img=#{rev_img} WHERE
		id=#{id} AND status='N';
	</update>

	<!-- 문의 삭제를 위한 기능 정의 -->
	<delete id="deleteQna"
		parameterType="study.spring.surisulsul.model.Qna">
		DELETE FROM qna WHERE id=#{id}
	</delete>

</mapper>